.Dd January 10, 2013
.Dt LIBSMQ 3
.Os
.Sh NAME
.Nm libsmq
.Nd a simple message queue library
.Sh SYNOPSIS
.In smq.h
.Ft smq
.Fo smq_create
.Fa void
.Fc
.Ft int
.Fo smq_send
.Fa "smq queue"
.Fa "struct smq_msg *message"
.Fc
.Ft "struct smq_msg *"
.Fo smq_receive
.Fa "smq queue"
.Fc
.Ft size_t
.Fo smq_len
.Fa "smq queue"
.Fc
.Ft void
.Fo smq_settimeout
.Fa "smq queue"
.Fa "struct timeval *timeo"
.Fc
.Ft int
.Fo smq_dup
.Fa "smq queue"
.Fc
.Ft int
.Fo smq_destroy
.Fa "smq queue"
.Fc
.Ft "struct smq_msg"
.Fo smq_msg_create
.Fa "void *"
.Fa size_t
.Fc
.Ft int
.Fo smq_msg_destroy
.Fa "struct smq_msg *message"
.Fa "int opts"
.Fc
.Sh DESCRIPTION
.Nm
provides simple, thread-safe message queues (LIFO buffers) inspired 
by Go's channels. Messages contain a pointer to some arbitrary data
and contain the length of the data. A message struct is defined as:
.Bd -literal
struct smq_msg {
        void    *data;
	size_t   datalen;
};
.Ed
A queue stores an arbitrary number of messages. New message queues
are created with the
.Ic smq_create 
function. This ensures that all resources for the queue are properly
allocated and initialised.
.Sy "It is critical that all queues be created with smq_create"
.Sy "and destroyed with smq_destroy!"
.Ic smq_dup
increases the reference count on the message queue; this should be used
when multiple threads are using the same queue. When a thread is finished
with the queue, it should call smq_destroy on it.
New messages are added with
.Ic smq_send .
The pointer in the message struct is stored in the queue; it should not
be freed until the message has been retrieved. In addition, the function
will destroy the message container when it is done -- it is safe to
discard the message a successful send.
Messages can be pulled from the the queue with
.Ic smq_receive .
The number of messages currently in the queue can be determined with
.Ic smq_len .
The timeout for waiting on a semaphore can be changed with
.Ic smq_settimeout ,
which takes a
.Ic struct timeval * --
this is defined in sys/time.h. By default, the timeout value is 10ms.
Messages may be created by passing a pointer to the data and the length
of the data to
.Ic smq_msg_create .
The returned message (as well as messages returned from 
.Ic smq_receive )
.Sy must
be destroyed with
.Ic smq_msg_destroy .
This takes an option; currently, either SMQ_DESTROY_ALL or
SMQ_CONTAINER_ONLY. The SMQ_DESTROY_ALL destroys both the message
container and the pointer to the data in it; use this only when the message
has been successfully received and any relevant data copied out as
required.

.Sh RETURN VALUES
.Ic smq_create
returns an initialised message queue or NULL if one could not be
initialised.
.Ic smq_send
and
.Ic smq_destroy
return 0 on success, and nonzero on error. errno should contain the error
value.
.Sh EXAMPLES
A small part of a sample program might look like:
.Bd -literal
        smq              msgq;
        struct smq_msg  *msg;
        char            *buf;
        size_t           buflen;

        msgq = smq_create();
        /*
         * buf is filled with some data, and buflen is set to the
         * length of this data.
         */

        /* push buf into the queue */
        msg = smq_msg_create((void *)buf, buflen);
        if (0 != msgqueue_send(msgq, msg))
                warn("push failed");
        
        /*
         * If no errors were reported, the message container is deallocated
         * while the data itself is not. The pointer to the data is stored
         * in the queue, and should not be freed until the message is
         * received.
         */

        /*
         * retrieve a message; assume buf has been allocated memory
         * and the message is a C-string. it would be prudent to
         * ensure msg->msglen is less than buflen (assuming buflen
         * contains the size of buf).
         */
        msg = smq_receive(queue);
        if (NULL == msg) {
                warn("no message");
        } else {
                memcpy(buf, msg->data, msg->datalen);
                printf("[+] message: %s\n", buf);
                free(msg);
        }
.Ed
.Sh ERRORS
The most typical cause for errors in the library will be a failure
to lock the queue; while this is technically an error, it is an
expected error.
.Sh STANDARDS
.Nm
conforms to C99 and SUSv4.
.Sh AUTHORS
.Nm
was written by
.An Kyle Isom Aq Mt kyle@tyrfingr.is .
.Sh CAVEATS
.Sh BUGS
Please report bugs to the author.
